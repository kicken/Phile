<?php

require_once 'vendor/autoload.php';

use Phile\Core\Utility;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Helper\QuestionHelper;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\Question;

class SetupCommand extends Command
{
  protected function configure()
  {
    $this->setName('setup')
      ->setDescription('Perform initial phile configuration')
    ;
  }

  protected function execute(InputInterface $input, OutputInterface $output)
  {
    /** @var QuestionHelper $asker */
    $asker = $this->getHelper('question');

    $output->writeln('Welcome to PhileCMS');
    $output->writeln('To continue we first need to get a few configuration details out of the way.');

    $config = [
      'site_title' => $this->askSiteTitle($input, $output, $asker)
      ,
      'encryptionKey' => $this->askEncryptionKey($input, $output, $asker)
    ];

    $this->writeConfiguration($output, $config);
    $this->createVarDirectory($output);
  }

  private function askSiteTitle(InputInterface $input, OutputInterface $output, QuestionHelper $asker)
  {
    $title = 'PhileCMS';
    $question = new Question('<question>Site Title:</question> ', $title);

    return $asker->ask($input, $output, $question);
  }

  private function askEncryptionKey(InputInterface $input, OutputInterface $output, QuestionHelper $asker)
  {
    $key = $this->generateRandomKey();
    $question = new Question('<question>Encryption Key (blank for a random key):</question> ', $key);

    return $asker->ask($input, $output, $question);
  }

  private function generateRandomKey()
  {
    return Utility::generateSecureToken(64);
  }

  private function getPath($sub)
  {
    $rootDir = __DIR__ . '/../';

    return str_replace('/', DIRECTORY_SEPARATOR, $rootDir . $sub);
  }

  private function writeConfiguration(OutputInterface $output, array $config)
  {
    $contents = '<?php return ' . var_export($config, true) . ';';

    $configFile = $this->getPath('config.php');
    $fp = fopen($configFile, 'w');
    if (!$fp) {
      $output->writeln('<error>Could not open configuration file (' . $configFile . ') for writing.</error>');
      $output->writeln('Please create this file with the following contents: ');
      $output->writeln($contents);
    } else {
      fwrite($fp, $contents);
      fclose($fp);
    }
  }

  private function createVarDirectory(OutputInterface $output)
  {
    $cacheDir = $this->getPath('var/cache');
    $storageDir = $this->getPath('var/datastorage');

    $result = true;
    if (!file_exists($cacheDir)) {
      $result = mkdir($cacheDir, 0775, true);
    }

    if (!file_exists($storageDir)) {
      $result = $result && mkdir($storageDir, 0775, true);
    }

    if (!$result) {
      $output->writeln('<error>Could not create cache and storage directories.</error>');
      $output->writeln('Please create the following directories and ensure they are writable by the server.');
      $output->writeln('  ' . $cacheDir);
      $output->writeln('  ' . $storageDir);
    }
  }
}

$console = new Application();
$console->add(new SetupCommand());
$console->run();
